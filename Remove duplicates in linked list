Given a singly linked list node, remove nodes with duplicate values while maintaining relative order of the original list.

For example, given

1 -> 5 -> 3 -> 5 -> 9 -> 7 -> 9 -> 1
Return

1 -> 5 -> 3 -> 9 -> 7
Example 1
Input

node = 3 → 2 → 1 → 3 → 1 → null
Output

3 → 2 → 1 → null


/*************************************CODE*******************************************************/

import java.util.*;

/**
 * class LLNode {
 *   int val;
 *   LLNode next;
 * }
 */
class Solution {
    public LLNode solve(LLNode node) {
        HashMap<Integer, Integer> map = new HashMap<>();
        LLNode temp = node;
        LLNode ref = temp;
        int count=1;
        boolean flag = false;
        while(temp != null){
            flag = map.containsKey(temp.val);
            if(flag){
                ref.next = temp.next;
                
            }else{
                map.put(temp.val, 1);
            }
            if(count == 1){
                count = 0;
            }else{
                if(!flag){
                    ref = ref.next;
                }
            }
            temp = temp.next;
        }
        return node;
    }
}
