Given a singly linked list l0 and another linked list l1, each representing a number with least significant digits first, return the summed linked list.

For example, given

1 -> 2 -> 1
3 -> 9 -> 1
Return

4 -> 1 -> 3


/**********************CODE*************************/

import java.util.*;

/**
 * class LLNode {
 *   int val;
 *   LLNode next;
 * }
 */
class Solution {
    public LLNode solve(LLNode l0, LLNode l1) {
        LLNode head = null;
        LLNode node = null;
        LLNode temp0 = l0;
        LLNode temp1 = l1;
        int carry = 0;
        int sum = 0;
        while(temp0!=null && temp1!=null){
            sum = temp0.val + temp1.val + carry;
            if(sum>9){
                carry = 1;
                sum = sum % 10;
            }else{
                carry = 0;
            }
            LLNode newNode = new LLNode(sum);
            if(temp0 == l0 && temp1 == l1){
                head = newNode;
                node = head;
            }else{
                node.next = newNode;
                node = node.next;
            }
            temp0 = temp0.next;
            temp1 = temp1.next;
        }
        while(temp0!=null){
            if(carry == 1){
                sum = temp0.val + carry;
                if(sum > 9){
                    sum = sum % 10;
                    carry = 1;
                }else{
                    carry = 0;
                } 
            }else{
                sum = temp0.val;
                carry = 0;
            }
            LLNode newNode = new LLNode(sum);
            node.next = newNode;
            node = node.next;
            temp0 = temp0.next;
        }
        while(temp1!=null){
            if(carry == 1){
                sum = temp1.val + carry;
                if(sum > 9){
                    sum = sum % 10;
                    carry = 1;
                }else{
                    carry = 0;
                } 
            }else{
                sum = temp1.val;
                carry = 0;
            }
            LLNode newNode = new LLNode(sum);
            node.next = newNode;
            node = node.next;
            temp1 = temp1.next;
        }
        if(carry == 1){
            carry = 0;
            LLNode newNode = new LLNode(1);
            node.next = newNode;
            node = node.next;
        }
        return head;
    }
}
